// <auto-generated />
using System;
using GeneralWorkPermit.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeneralWorkPermit.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("GeneralWorkPermit.Models.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AdminType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("admins");

                    b.HasData(
                        new
                        {
                            Id = "Admin",
                            AdminType = 0,
                            UserId = "Admin"
                        });
                });

            modelBuilder.Entity("GeneralWorkPermit.Models.Applicants", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Equipments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Facility")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("applicant");
                });

            modelBuilder.Entity("GeneralWorkPermit.Models.GasTestingRequireemnts", b =>
                {
                    b.Property<string>("GasTestingId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoAndPpm")
                        .HasColumnType("TEXT");

                    b.Property<string>("GasTesterName")
                        .HasColumnType("TEXT");

                    b.Property<string>("H2S")
                        .HasColumnType("TEXT");

                    b.Property<int>("Hours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Instrument")
                        .HasColumnType("TEXT");

                    b.Property<int>("OTwo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Percent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Signature")
                        .HasColumnType("TEXT");

                    b.Property<string>("others")
                        .HasColumnType("TEXT");

                    b.HasKey("GasTestingId");

                    b.ToTable("gastesting");
                });

            modelBuilder.Entity("GeneralWorkPermit.Models.Reviews", b =>
                {
                    b.Property<string>("ReviewsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BackInService")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackInServiceDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackInServiceReason")
                        .HasColumnType("TEXT");

                    b.Property<int>("BackInServiceTagNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ByPassReason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ByPassed")
                        .HasColumnType("TEXT");

                    b.Property<string>("ByPassedDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("ByPassedTagNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CriticalLift")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GWPNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("GWTapprove")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GasTestingId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HazardousEnergy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("JSAReviewed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ManagementOfChange")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NightWork")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OtherSpecialRequirements")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ProvideAccess")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RestrictAccess")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SpeialRequirement")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReviewsId");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.HasIndex("GasTestingId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("GeneralWorkPermit.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<int>("LoginAttempt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Admin",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e266a53-8259-4272-a87a-ed81e350592f",
                            Email = "admin@gnp.com",
                            EmailConfirmed = false,
                            FirstName = "Default",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LoginAttempt = 0,
                            Password = "P@ssw0rd",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "238d90e7-372c-46af-8c0c-91f18e55d2eb",
                            TwoFactorEnabled = false,
                            UserName = "admin@gnp.com",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "516b59fa-6185-4a4f-bee1-b6a4a8bd6dda",
                            ConcurrencyStamp = "bf13dfd2-a931-4902-9aa4-1301cbab6a31",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "9391e3e9-d063-4e73-a8a4-46204c6a05a3",
                            ConcurrencyStamp = "f3a5826e-ba7a-4354-8cb3-d6803013c8ca",
                            Name = "Inspector",
                            NormalizedName = "INSPECTOR"
                        },
                        new
                        {
                            Id = "b78d9638-da62-477b-a2ec-3c30cd6825f8",
                            ConcurrencyStamp = "354ffebe-d564-41d0-beb9-01d9ecadf53b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GeneralWorkPermit.Models.Applicants", b =>
                {
                    b.HasOne("GeneralWorkPermit.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GeneralWorkPermit.Models.Reviews", b =>
                {
                    b.HasOne("GeneralWorkPermit.Models.Applicants", "Applicant")
                        .WithOne("Reviews")
                        .HasForeignKey("GeneralWorkPermit.Models.Reviews", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralWorkPermit.Models.GasTestingRequireemnts", "GasTesting")
                        .WithMany()
                        .HasForeignKey("GasTestingId");

                    b.Navigation("Applicant");

                    b.Navigation("GasTesting");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GeneralWorkPermit.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GeneralWorkPermit.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralWorkPermit.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GeneralWorkPermit.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralWorkPermit.Models.Applicants", b =>
                {
                    b.Navigation("Reviews")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
