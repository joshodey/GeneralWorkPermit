// <auto-generated />
using System;
using GeneralWorkPermit.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeneralWorkPermit.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.15");

            modelBuilder.Entity("GeneralWorkPermit.Models.Applicants", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Equipments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Facility")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GeneralWorkPermit.Models.GasTestingRequireemnts", b =>
                {
                    b.Property<string>("GasTestingId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoAndPpm")
                        .HasColumnType("TEXT");

                    b.Property<string>("GasTesterName")
                        .HasColumnType("TEXT");

                    b.Property<string>("H2S")
                        .HasColumnType("TEXT");

                    b.Property<int>("Hours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Instrument")
                        .HasColumnType("TEXT");

                    b.Property<int>("OTwo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Percent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Signature")
                        .HasColumnType("TEXT");

                    b.Property<string>("others")
                        .HasColumnType("TEXT");

                    b.HasKey("GasTestingId");

                    b.ToTable("gastesting");
                });

            modelBuilder.Entity("GeneralWorkPermit.Models.Reviews", b =>
                {
                    b.Property<string>("ReviewsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BackInService")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackInServiceDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackInServiceReason")
                        .HasColumnType("TEXT");

                    b.Property<int>("BackInServiceTagNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ByPassReason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ByPassed")
                        .HasColumnType("TEXT");

                    b.Property<string>("ByPassedDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("ByPassedTagNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CriticalLift")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GWPNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("GWTapprove")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GasTestingId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HazardousEnergy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("JSAReviewed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ManagementOfChange")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NightWork")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OtherSpecialRequirements")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ProvideAccess")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RestrictAccess")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SpeialRequirement")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReviewsId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("GasTestingId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6d1f655c-b0db-443c-bb6f-fdf8df1ca955",
                            ConcurrencyStamp = "f1017cfa-7e8c-4df5-acaa-aac90a8165f5",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "b06fd7d9-1729-4d45-af72-6481ef5f7199",
                            ConcurrencyStamp = "95b9ebb8-5f08-42cc-852d-0066b37b6fd3",
                            Name = "Inspector",
                            NormalizedName = "INSPECTOR"
                        },
                        new
                        {
                            Id = "77834870-6ea4-4678-9dfa-156896bc614d",
                            ConcurrencyStamp = "d185fc37-83d7-49c1-be2c-b27d629208e0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GeneralWorkPermit.Models.Reviews", b =>
                {
                    b.HasOne("GeneralWorkPermit.Models.Applicants", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralWorkPermit.Models.GasTestingRequireemnts", "GasTesting")
                        .WithMany()
                        .HasForeignKey("GasTestingId");

                    b.Navigation("Applicant");

                    b.Navigation("GasTesting");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GeneralWorkPermit.Models.Applicants", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GeneralWorkPermit.Models.Applicants", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralWorkPermit.Models.Applicants", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GeneralWorkPermit.Models.Applicants", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
